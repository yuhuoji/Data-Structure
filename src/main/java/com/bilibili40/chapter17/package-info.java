/**
 * 有序表O(logN)
 * 红黑树
 * AVL
 * SB
 * 跳表skiplist
 */
package com.bilibili40.chapter17;
/**
 * 搜索二叉树的操作：增删改查
 * 平衡性的定义，不同的树定义不同
 * 左旋和右旋
 * ------
 * AVL树
 * 破坏平衡性的四种情况：LL(1次) RR(1次) LR(2次) RL(2次)
 * AVL树实现
 * ------
 * 红黑树
 * 平衡：任何一个点到叶节点的长度，最长和最短的差距不会超过一倍
 * ------
 * 跳表
 * 每个节点的指针至少一个，存在list中。每个节点的高度完全由概率决定，与输入数据大小无关。
 * 高度(指针数量) 和 数据数量的关系：0 - N,1 - N/2,2 - N/4 ...
 * 最少为0层(普通的遍历)
 * 查找时从高向低，利用高度的索引加速，
 */
/*
《社会工程学部分》
AWS，阿里云
 */